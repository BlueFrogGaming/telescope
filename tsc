#!/usr/bin/env lua
package.path = './?.lua;' .. package.path

local telescope = require 'telescope'
local lapp      = require "pl.lapp"

local description = [[
Telescope %s
------------------------------------------------------------------------------
Telescope is a test framework for Lua that allows you to write tests and specs
in a declarative style.

Project home and docs:
  http://norman.github.com/telescope

License:
  MIT/X11 (Same as Lua)

Author:
  Norman Clarke <norman@njclarke.com>

Options:

-f,--full                        Show full report
-q,--quiet                       Don't show any stack traces
-s,--silent                      Don't show any output at all
-h,--help                        Show this text
-c,--luacov                      Output a stats.out file for Luacov
-k,--shake                       Use Shake as the front-end for tests
-m,--progress                    Show a progress meter while running
-l,--load         (default nil)  Load a Lua file before executing command
-p,--pattern      (default nil)  Only run tests whose name matches a pattern
-a,--after        (default nil)  Run callback after each test
-b,--before       (default nil)  Run callback before each test
-r,--err          (default nil)  Run callback after each test with errors
-i,--fail         (default nil)  Run callback after each failing test
-z,--pass         (default nil)  Run callback after each passing test
-d,--pending      (default nil)  Run callback after each pending test
-u,--unassertive  (default nil)  Run callback after each unassertive test
 <files...>       (string)       Test file(s)
]]

local args = lapp(description:format(telescope.version))

local function load_contexts()
  local contexts = {}
  local loader = args.shake and shake or telescope
  for _, file in ipairs(args.files) do
    loader.load_contexts(file, contexts)
  end
  return contexts
end

local function output_report(contexts, results)
  if args.silent then return end
  if args.progress then print() end
  local func = telescope[(args.full and "test" or "summary") .. "_report"]
  print((func(contexts, results)))
  if args.quiet then return end
  local error_report = telescope.error_report(contexts, results)
  if error_report then print(error_report) end
end

local function add_callback(callbacks, name, func)
  if callbacks[name] then
    if type(callbacks[name]) ~= "table" then
      callbacks[name] = {callbacks[name]}
    end
    table.insert(callbacks[name], func)
  else
    callbacks[name] = func
  end
end

local function get_callbacks()
  local callbacks = {}
  local callback_args = { "after", "before", "err", "fail", "pass",
    "pending", "unassertive" }
  for _, name in ipairs(callback_args) do
    if args[name] ~= "nil" then
      local my_func
      local func = loadstring(args[name])
      if not func then
        func = loadstring("return " .. args[name])
        my_func = func()
      else
        my_func = function() func() end
      end
      add_callback(callbacks, name, my_func)
    end
  end
  return callbacks
end

local function main()
  -- load a file with custom functionality if desired
  if args.load ~= "nil" then dofile(args.load) end
  -- coverage reports
  if args.luacov then require "luacov.tick" end

  -- run only tests that match a pattern
  local test_pattern
  if args.pattern ~= "nil" then
    test_pattern = function(t) return t.name:match(args.pattern) end
  end

  local contexts  = load_contexts()
  local callbacks = get_callbacks()

  -- progress meter
  if args.progress then
    add_callback(callbacks, "after", function(t)
      io.stdout:write(t.status_label)
      io.stdout:flush()
    end)
  end
  output_report(contexts, telescope.run(contexts, callbacks, test_pattern))
end

main()
